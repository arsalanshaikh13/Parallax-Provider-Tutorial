name: Lint, Test and Build
inputs:
  secret_input_github_token:
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.20.8
        # https://github.com/actions/setup-node
        # https://oozou.com/blog/ci-cd-tips-improve-your-ci-cd-with-cache-github-version-209
        # # this only caches the node packages, but still yarn install will take time as yarn install has to compile the code in yarn packages to specific node version
        # # for advance caching see below
        # cache: 'yarn'
        # # ensure is cache is dependent on yarn.lock, so cache is update when dependencies change, useful for caching in monorepo
        # cache-dependency-path: yarn.lock

    # https://oozou.com/blog/ci-cd-tips-improve-your-ci-cd-with-cache-github-version-209
    - name: Get node version
      id: node_v
      run: |
        echo "version=$(node -v)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Get node_modules
      uses: actions/cache@v4
      id: node_modules
      with:
        path: |
          **/node_modules
        # hashing yarn.lock to freeze package dependencies version and checking for those specific verison only
        # Adding node version as cache key
        key:
          ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{
          steps.node_v.outputs.version }}

    - name: Install dependencies
      run: yarn install  --frozen-lockfile
      shell: bash

    - name: Lint
      run: yarn lint
      shell: bash

    - name: Test
      run: yarn test
      shell: bash

    - name: Build
      run: yarn build
      shell: bash

    # https://www.youtube.com/watch?v=ClLKbB_59Ec&list=PLiO7XHcmTsleVSRaY7doSfZryYWMkMOxB&index=11
    # create a test summary markdown file
    # if you don't specify an output file, it will automatically add
    # as a job summary. if you specify an output file, you have to
    # create your own step of adding it to the job summary. I am
    # intentionally doing that to show job summaries
    # this example was used in mickey gousset video on github action part 5 but his app was built in .NET
    # so this action didn't support clover.xml file
    # - name: Create test summary
    #   uses: test-summary/action@v2.4
    #   with:
    #     paths: ${{ github.workspace }}/coverage/*.xml
    #     output: ${{ github.workspace }}/coverage/clover.md
    #     show: 'all'
    #   if: always()
    - name: Jest Coverage Comment
      id: coverage
      # https://github.com/marketplace/actions/jest-coverage-report
      # https://medium.com/@tuxdev/coverage-of-jest-unit-tests-using-github-action-ffb6372cdfe
      uses: ArtiomTr/jest-coverage-report-action@v2
      with:
        github-token: ${{ inputs.secret_input_github_token }} # github-token is the internal variable name inside ArtiomTr/jest-coverage/report-action
        annotations: all
        # this will skip installing dependencies and running test-script, by default skip-step: none so it will install and run test-script
        skip-step: all
        coverage-file: ${{github.workspace}}/coverage/report.json
        base-coverage-file: ${{github.workspace}}/coverage/report.json
        output: comment, report-markdown
        icons: emoji

    # # Adding the test results to the Job summary
    # - name: Add the test Results to Job summary
    #   run: |
    #     echo "TEST RESULTS:" >> $GITHUB_STEP_SUMMARY
    #     echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
    #     cat "${{ github.workspace }}/coverage/clover.md" >> $GITHUB_STEP_SUMMARY
    #   shell: bash
    #   if: always()
    - name: Check the output coverage
      run: |
        echo "TEST RESULTS:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat <<EOF >> "$GITHUB_STEP_SUMMARY"
        ${{ steps.coverage.outputs.report }}
        EOF
      shell: bash
      if: always()

    # https://github.com/actions/upload-artifact
    - name: Upload build artifacts (dist/)
      uses: actions/upload-artifact@v4
      with:
        # name of the artifact zip file
        name: dist
        # upload all the files from the dist folder
        path: dist/**
        # behavior when no files found
        if-no-files-found: error
        # duration after which the artifact expire
        retention-days: 1 day
